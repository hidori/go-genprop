package app

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestRun(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name    string
		args    []string
		wantErr bool
	}{
		{
			name:    "success: run with valid file argument",
			args:    []string{"genprop", "../../testdata/internal/app/valid_syntax_input.go.txt"},
			wantErr: false,
		},
		{
			name:    "failure: run with non-existent file",
			args:    []string{"genprop", "non_existent_file.go"},
			wantErr: true,
		},
		{
			name:    "success: version flag",
			args:    []string{"genprop", "--version"},
			wantErr: false,
		},
		{
			name:    "failure: no file argument",
			args:    []string{"genprop"},
			wantErr: true,
		},
		{
			name:    "failure: multiple file arguments",
			args:    []string{"genprop", "file1.go", "file2.go"},
			wantErr: true,
		},
		{
			name:    "success: custom flags with valid file",
			args:    []string{"genprop", "--initialism", "api,id", "--validation-func", "customValidate", "--validation-tag", "custom", "../../testdata/internal/app/valid_syntax_input.go.txt"},
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Version flag test should not run in parallel due to stdout manipulation
			if tt.name != "success: version flag" {
				t.Parallel()
			}

			err := Run(tt.args[1:]) // Skip program name

			if tt.wantErr {
				require.Error(t, err)
			} else {
				require.NoError(t, err)
			}
		})
	}
}

func TestGenerate(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name         string
		fileName     string
		wantErr      bool
		wantContains []string
	}{
		{
			name:     "success: generates code for valid file",
			fileName: "../../testdata/internal/app/valid_syntax_input.go.txt",
			wantErr:  false,
			wantContains: []string{
				"// Code generated by",
				"package test",
				"func (t *TestStruct) GetField() string",
				"func (t *TestStruct) SetField(v string)",
			},
		},
		{
			name:     "failure: non-existent file",
			fileName: "non_existent_file.go",
			wantErr:  true,
		},
		{
			name:     "failure: invalid syntax file",
			fileName: "../../testdata/internal/app/invalid_syntax_input.go.txt",
			wantErr:  true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()

			var buffer bytes.Buffer
			err := generate(&buffer, tt.fileName, "id,url,api", "validateFieldValue", "validate")

			if tt.wantErr {
				require.Error(t, err)
				return
			}

			require.NoError(t, err)
			output := buffer.String()

			for _, want := range tt.wantContains {
				assert.Contains(t, output, want)
			}
		})
	}
}
