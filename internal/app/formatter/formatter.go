package formatter

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/token"
	"io"

	"github.com/pkg/errors"
	"golang.org/x/tools/imports"
)

const doNotEdit = "// Code generated by github.com/hidori/go-genprop/cmd/genprop DO NOT EDIT."

// WriteOutput formats and writes the generated code with imports processing.
func WriteOutput(writer io.Writer, packageName string, decls []ast.Decl) error {
	buffer := bytes.NewBuffer([]byte{})

	err := format.Node(buffer, token.NewFileSet(), &ast.File{
		Name:  ast.NewIdent(packageName),
		Decls: decls,
	})
	if err != nil {
		return errors.WithStack(err)
	}

	cooked, err := imports.Process("", buffer.Bytes(), &imports.Options{FormatOnly: false})
	if err != nil {
		return errors.WithStack(err)
	}

	_, _ = fmt.Fprintln(writer, doNotEdit)
	_, _ = writer.Write(cooked)

	return nil
}
